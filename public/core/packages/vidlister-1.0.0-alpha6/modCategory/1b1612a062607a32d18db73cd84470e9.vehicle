<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '6e52a7b5b54b8711de9428cd78c4e4c6' => 
      array (
        'preserve_keys' => false,
        'update_object' => false,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"vlVimeo","description":"Vimeo video","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"video\\">\\r\\n  <h3>[[+name:html]]<\\/h3>\\r\\n  <p>[[%vidlister.video.source]]: [[+source]]. [[%vidlister.video.duration]]: [[+duration.hh]]:[[+duration.mm]]:[[+duration.ss]] ([[+duration.seconds]] [[%vidlister.video.duration.seconds]]).<\\/p>\\r\\n  <a href=\\"http:\\/\\/vimeo.com\\/[[+videoId]]\\" rel=\\"prettyPhoto\\" title=\\"[[+name:html]]\\"><img src=\\"[[+image]]\\" alt=\\"[[+name:html]]\\" \\/><\\/a>\\r\\n<\\/div>","locked":0,"properties":null,"static":0,"static_file":"","content":"<div class=\\"video\\">\\r\\n  <h3>[[+name:html]]<\\/h3>\\r\\n  <p>[[%vidlister.video.source]]: [[+source]]. [[%vidlister.video.duration]]: [[+duration.hh]]:[[+duration.mm]]:[[+duration.ss]] ([[+duration.seconds]] [[%vidlister.video.duration.seconds]]).<\\/p>\\r\\n  <a href=\\"http:\\/\\/vimeo.com\\/[[+videoId]]\\" rel=\\"prettyPhoto\\" title=\\"[[+name:html]]\\"><img src=\\"[[+image]]\\" alt=\\"[[+name:html]]\\" \\/><\\/a>\\r\\n<\\/div>"}',
        'guid' => '3901dcd36874e672bb785dea01c6817f',
        'native_key' => 0,
        'signature' => 'e9cfb43c296cdb83b3de13f245a21c06',
      ),
      '4f5b96c4063ab9654be0f9c95c919fb3' => 
      array (
        'preserve_keys' => false,
        'update_object' => false,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"vlYoutube","description":"Youtube video","editor_type":0,"category":0,"cache_type":0,"snippet":"<div class=\\"video\\">\\r\\n  <h3>[[+name:html]]<\\/h3>\\r\\n  <p>[[%vidlister.video.source]]: [[+source]]. [[%vidlister.video.duration]]: [[+duration.hh]]:[[+duration.mm]]:[[+duration.ss]] ([[+duration.seconds]] [[%vidlister.video.duration.seconds]]).<\\/p>\\r\\n  <a href=\\"http:\\/\\/www.youtube.com\\/watch?v=[[+videoId]]\\" rel=\\"prettyPhoto\\" title=\\"[[+name:html]]\\"><img src=\\"[[+image]]\\" alt=\\"[[+name:html]]\\" \\/><\\/a>\\r\\n<\\/div>","locked":0,"properties":null,"static":0,"static_file":"","content":"<div class=\\"video\\">\\r\\n  <h3>[[+name:html]]<\\/h3>\\r\\n  <p>[[%vidlister.video.source]]: [[+source]]. [[%vidlister.video.duration]]: [[+duration.hh]]:[[+duration.mm]]:[[+duration.ss]] ([[+duration.seconds]] [[%vidlister.video.duration.seconds]]).<\\/p>\\r\\n  <a href=\\"http:\\/\\/www.youtube.com\\/watch?v=[[+videoId]]\\" rel=\\"prettyPhoto\\" title=\\"[[+name:html]]\\"><img src=\\"[[+image]]\\" alt=\\"[[+name:html]]\\" \\/><\\/a>\\r\\n<\\/div>"}',
        'guid' => '8c8ea328c6a83ad6d3ea4ee651bb2d89',
        'native_key' => 0,
        'signature' => 'fa05ab2a61edd00148cb1fde24c6a7fe',
      ),
    ),
    'Snippets' => 
    array (
      '1ad94460744ea958cb2023e4140a75d5' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"VidLister","description":"Show video list like gallery","editor_type":0,"category":0,"cache_type":0,"snippet":"$modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n\\r\\n$modx->lexicon->load(\'vidlister:default\');\\r\\n\\r\\n\\/\\/settings\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'{\\"youtube\\":\\"vlYoutube\\",\\"vimeo\\":\\"vlVimeo\\"}\');\\r\\n$scripts = $modx->getOption(\'scripts\', $scriptProperties, \'1\');\\r\\n$sortby = $modx->getOption(\'sortby\', $scriptProperties, \'id\');\\r\\n$sortdir = $modx->getOption(\'sortdir\', $scriptProperties, \'ASC\');\\r\\n\\r\\n\\/\\/template per source set using JSON\\r\\n$tpls = $modx->fromJSON($tpl);\\r\\n\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n\\r\\n\\/\\/getPage setings\\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, 10);\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n\\r\\nif($scripts)\\r\\n{\\r\\n    $modx->regClientStartupHTMLBlock(\'<link rel=\\"stylesheet\\" type=\\"text\\/css\\" href=\\"assets\\/components\\/vidlister\\/js\\/web\\/prettyphoto\\/css\\/prettyPhoto.css\\" \\/>\');\\r\\n    $modx->regClientStartupScript(\'assets\\/components\\/vidlister\\/js\\/web\\/prettyphoto\\/js\\/jquery.prettyPhoto.js\');\\r\\n    $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\r\\n        $(document).ready(function(){\\r\\n        \\t$(\\"a[rel^=\\\\\'prettyPhoto\\\\\']\\").prettyPhoto();\\r\\n        });\\r\\n      <\\/script>\');\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\n$c = $modx->newQuery(\'vlVideo\');\\r\\n\\r\\n\\/\\/criteria\\r\\nif (!empty($where)) {\\r\\n    $c->where($where);\\r\\n}\\r\\n$c->andCondition(array(\'active\' => 1));\\r\\n\\r\\n\\/\\/set placeholder for getPage\\r\\n$modx->setPlaceholder($totalVar, $modx->getCount(\'vlVideo\', $c));\\r\\n\\r\\n$c->sortby($sortby, $sortdir);\\r\\n$c->limit($limit, $offset);\\r\\n\\r\\n$idx = 0; \\/\\/index\\r\\n$videos = $modx->getCollection(\'vlVideo\', $c);\\r\\nforeach($videos as $video)\\r\\n{\\r\\n    $duration = $video->duration();\\r\\n\\r\\n    $video = $video->toArray();\\r\\n    $source = $video[\'source\'];\\r\\n    $video[\'duration\'] = $duration;\\r\\n    $video[\'image\'] = $modx->getOption(\'assets_url\').\'components\\/vidlister\\/images\\/\'.$video[\'id\'].\'.jpg\';\\r\\n    $video[\'idx\'] = $idx; \\/\\/index\\r\\n\\r\\n    if(isset($tpls[$source]))\\r\\n    {\\r\\n        $output .= $modx->getChunk($tpls[$source], $video);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        $output .= $modx->getChunk($tpl, $video);\\r\\n    }\\r\\n    $idx++;\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:5:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:24:\\"vidlister.properties.tpl\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:41:\\"{\\"youtube\\":\\"vlYoutube\\",\\"vimeo\\":\\"vlVimeo\\"}\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"where\\";a:7:{s:4:\\"name\\";s:5:\\"where\\";s:4:\\"desc\\";s:26:\\"vidlister.properties.where\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"limit\\";a:7:{s:4:\\"name\\";s:5:\\"limit\\";s:4:\\"desc\\";s:26:\\"vidlister.properties.limit\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"offset\\";a:7:{s:4:\\"name\\";s:6:\\"offset\\";s:4:\\"desc\\";s:27:\\"vidlister.properties.offset\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"totalVar\\";a:7:{s:4:\\"name\\";s:8:\\"totalVar\\";s:4:\\"desc\\";s:29:\\"vidlister.properties.totalvar\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:5:\\"total\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"$modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n\\r\\n$modx->lexicon->load(\'vidlister:default\');\\r\\n\\r\\n\\/\\/settings\\r\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'{\\"youtube\\":\\"vlYoutube\\",\\"vimeo\\":\\"vlVimeo\\"}\');\\r\\n$scripts = $modx->getOption(\'scripts\', $scriptProperties, \'1\');\\r\\n$sortby = $modx->getOption(\'sortby\', $scriptProperties, \'id\');\\r\\n$sortdir = $modx->getOption(\'sortdir\', $scriptProperties, \'ASC\');\\r\\n\\r\\n\\/\\/template per source set using JSON\\r\\n$tpls = $modx->fromJSON($tpl);\\r\\n\\r\\n$where = $modx->getOption(\'where\', $scriptProperties, \'\');\\r\\n$where = !empty($where) ? $modx->fromJSON($where) : array();\\r\\n\\r\\n\\/\\/getPage setings\\r\\n$limit = $modx->getOption(\'limit\', $scriptProperties, 10);\\r\\n$offset = $modx->getOption(\'offset\', $scriptProperties, 0);\\r\\n$totalVar = $modx->getOption(\'totalVar\', $scriptProperties, \'total\');\\r\\n\\r\\nif($scripts)\\r\\n{\\r\\n    $modx->regClientStartupHTMLBlock(\'<link rel=\\"stylesheet\\" type=\\"text\\/css\\" href=\\"assets\\/components\\/vidlister\\/js\\/web\\/prettyphoto\\/css\\/prettyPhoto.css\\" \\/>\');\\r\\n    $modx->regClientStartupScript(\'assets\\/components\\/vidlister\\/js\\/web\\/prettyphoto\\/js\\/jquery.prettyPhoto.js\');\\r\\n    $modx->regClientStartupHTMLBlock(\'<script type=\\"text\\/javascript\\">\\r\\n        $(document).ready(function(){\\r\\n        \\t$(\\"a[rel^=\\\\\'prettyPhoto\\\\\']\\").prettyPhoto();\\r\\n        });\\r\\n      <\\/script>\');\\r\\n}\\r\\n\\r\\n$output = \'\';\\r\\n\\r\\n$c = $modx->newQuery(\'vlVideo\');\\r\\n\\r\\n\\/\\/criteria\\r\\nif (!empty($where)) {\\r\\n    $c->where($where);\\r\\n}\\r\\n$c->andCondition(array(\'active\' => 1));\\r\\n\\r\\n\\/\\/set placeholder for getPage\\r\\n$modx->setPlaceholder($totalVar, $modx->getCount(\'vlVideo\', $c));\\r\\n\\r\\n$c->sortby($sortby, $sortdir);\\r\\n$c->limit($limit, $offset);\\r\\n\\r\\n$idx = 0; \\/\\/index\\r\\n$videos = $modx->getCollection(\'vlVideo\', $c);\\r\\nforeach($videos as $video)\\r\\n{\\r\\n    $duration = $video->duration();\\r\\n\\r\\n    $video = $video->toArray();\\r\\n    $source = $video[\'source\'];\\r\\n    $video[\'duration\'] = $duration;\\r\\n    $video[\'image\'] = $modx->getOption(\'assets_url\').\'components\\/vidlister\\/images\\/\'.$video[\'id\'].\'.jpg\';\\r\\n    $video[\'idx\'] = $idx; \\/\\/index\\r\\n\\r\\n    if(isset($tpls[$source]))\\r\\n    {\\r\\n        $output .= $modx->getChunk($tpls[$source], $video);\\r\\n    }\\r\\n    else\\r\\n    {\\r\\n        $output .= $modx->getChunk($tpl, $video);\\r\\n    }\\r\\n    $idx++;\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => 'e1b2724804d16ac58760bf68906254e0',
        'native_key' => 0,
        'signature' => '74bc44217170ed077184ea48faeba403',
      ),
    ),
    'Plugins' => 
    array (
      'e1f6d6d08deeec1acdfe351d82b1d942' => 
      array (
        'preserve_keys' => true,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"vlYoutube","description":"Imports Youtube videos for VidLister","editor_type":0,"category":0,"cache_type":0,"plugincode":"if($modx->event->name == \'OnVidListerImport\')\\r\\n{\\r\\n    $user = $modx->getOption(\'user\', $scriptProperties, \'\'); \\/\\/get user name(s)\\r\\n    $active = $modx->getOption(\'active\', $scriptProperties, false); \\/\\/make imported videos inactive by default\\r\\n\\r\\n    if(!empty($user))\\r\\n    {\\r\\n        $modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n        $modx->lexicon->load(\'vidlister:default\');\\r\\n\\r\\n        if (empty($modx->rest))\\r\\n        {\\r\\n            $modx->getService(\'rest\',\'rest.modRestClient\');\\r\\n            $loaded = $modx->rest->getConnection();\\r\\n            if (!$loaded) return $modx->lexicon(\'vidlister.import.err.client\');\\r\\n        }\\r\\n\\r\\n        $users = explode(\',\', $user); \\/\\/user names are comma separated\\r\\n\\r\\n        foreach($users as $user)\\r\\n        {\\r\\n            $modx->log(MODx::LOG_LEVEL_WARN, $modx->lexicon(\'vidlister.import.started\', array(\'source\' => \'Youtube\', \'user\' => $user)));\\r\\n\\r\\n            @$response = $modx->rest->request(\'http:\\/\\/gdata.youtube.com\',\'\\/feeds\\/api\\/users\\/\'.$user.\'\\/uploads\',\'GET\', array(\'max-results\' => 1), array())->response;\\r\\n            \\/\\/@ to prevent PHP notice about $xml being empty (???)\\r\\n            if(empty($response))\\r\\n            {\\r\\n                $modx->log(MODX_LOG_LEVEL_ERROR,  $modx->lexicon(\'vidlister.import.err\'));\\r\\n                continue; \\/\\/response was empty, so go to next user\\r\\n            }\\r\\n\\r\\n            \\/\\/create SimpleXmlElement\\r\\n            $xmlvideos = simplexml_load_string($response);\\r\\n            $openSearch = $xmlvideos->children(\'http:\\/\\/a9.com\\/-\\/spec\\/opensearchrss\\/1.0\\/\');\\r\\n\\r\\n            \\/\\/calculate total number of \\"pages\\" (each feed only lists 50 videos)\\r\\n            $totalVids = $openSearch->totalResults;\\r\\n            $pages = ceil($totalVids\\/50);\\r\\n\\r\\n            \\/\\/every movie not in this array will be deleted after import (no longer on Youtube)\\r\\n            $ids = array();\\r\\n\\r\\n            \\/\\/new\\/total counter for current user\\r\\n            $newVids = 0;\\r\\n\\r\\n            \\/\\/start at first video\\r\\n            $startIndex = 1;\\r\\n\\r\\n            \\/\\/get videos of each page\\r\\n            for($page=1; $page <= $pages; $page++)\\r\\n            {\\r\\n                @$response = $modx->rest->request(\'http:\\/\\/gdata.youtube.com\',\'\\/feeds\\/api\\/users\\/\'.$user.\'\\/uploads\',\'GET\', array(\'max-results\' => 50,\'start-index\' => $startIndex), array())->response;\\r\\n                $xmlvideos = simplexml_load_string($response);\\r\\n\\r\\n                \\/\\/loop through video entries\\r\\n                foreach($xmlvideos->entry as $xmlvideo)\\r\\n                {\\r\\n                    \\/\\/next 2 lines allow to get namespace data in media: and yt: namespace\\r\\n                    $media = $xmlvideo->children(\'http:\\/\\/search.yahoo.com\\/mrss\\/\');\\r\\n                    $yt = $media->children(\'http:\\/\\/gdata.youtube.com\\/schemas\\/2007\');\\r\\n\\r\\n                    \\/\\/get existing video\\r\\n                    $video = $modx->getObject(\'vlVideo\', array(\'source\' => \'youtube\', \'videoId\' => str_replace(\'http:\\/\\/gdata.youtube.com\\/feeds\\/api\\/videos\\/\', \'\', $xmlvideo->id)));\\r\\n                    if(!is_object($video))\\r\\n                    {\\r\\n                        \\/\\/not found, so create new video and set all fields\\r\\n                        $video = $modx->newObject(\'vlVideo\');\\r\\n                        $video->fromArray(array(\\r\\n                            \'active\' => (int)$active,\\r\\n                            \'created\' => strtotime($xmlvideo->published),\\r\\n                            \'updated\' => strtotime($xmlvideo->updated),\\r\\n                            \'source\' => \'youtube\',\\r\\n                            \'videoId\' =>  str_replace(\'http:\\/\\/gdata.youtube.com\\/feeds\\/api\\/videos\\/\', \'\', $xmlvideo->id),\\r\\n                            \'name\' => $xmlvideo->title,\\r\\n                            \'description\' => $xmlvideo->content,\\r\\n                            \'author\' => $xmlvideo->author->name,\\r\\n                            \'keywords\' => $media->group->keywords,\\r\\n                            \'duration\' => $yt->duration->attributes()->seconds,\\r\\n                            \'jsondata\' => array(\\r\\n                                \'flashUrl\' => (string)$media->group->content[0]->attributes()->url,\\r\\n                                \'3gppUrl\' => (string)$media->group->content[1]->attributes()->url\\r\\n                            )\\r\\n                        ));\\r\\n                        $newVids++;\\r\\n                    }\\r\\n                    else\\r\\n                    {\\r\\n                        \\/\\/existing video, so don\'t overwrite name\\/description\\/keywords\\r\\n                        $video->fromArray(array(\\r\\n                            \'updated\' => strtotime($xmlvideo->updated),\\r\\n                            \'author\' => $xmlvideo->author->name,\\r\\n                            \'duration\' => $yt->duration->attributes()->seconds,\\r\\n                            \'jsondata\' => array_merge(\\r\\n                                $video->get(\'jsondata\'),\\r\\n                                array(\\r\\n                                    \'flashUrl\' => (string)$media->group->content[0]->attributes()->url,\\r\\n                                    \'3gppUrl\' => (string)$media->group->content[1]->attributes()->url\\r\\n                                )\\r\\n                            )\\r\\n                        ));\\r\\n                    }\\r\\n                    $video->save();\\r\\n\\r\\n                    \\/\\/get image\\r\\n                    file_put_contents(\\r\\n                        $modx->getOption(\'assets_path\').\'components\\/vidlister\\/images\\/\'.$video->get(\'id\').\'.jpg\',\\r\\n                        file_get_contents($media->group->thumbnail[0]->attributes()->url)\\r\\n                    );\\r\\n\\r\\n                    $ids[] = $video->get(\'id\'); \\/\\/add to found\\/created ID\'s array\\r\\n                    $startIndex++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            $modx->log(modx::LOG_LEVEL_INFO, $modx->lexicon(\'vidlister.import.complete\', array(\'user\' => $user, \'source\' => \'Youtube\', \'total\' => $totalVids, \'new\' => $newVids)));\\r\\n\\r\\n            \\/\\/remove all videos not found in XML\\r\\n            $delVideos = $modx->getCollection(\'vlVideo\', array(\'source\' => \'youtube\', \'author\' => $user, \'id NOT IN(\'.implode(\',\', $ids).\')\'));\\r\\n            foreach($delVideos as $delVideo)\\r\\n            {\\r\\n                $delVideo->remove();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}","locked":0,"properties":"a:2:{s:4:\\"user\\";a:7:{s:4:\\"name\\";s:4:\\"user\\";s:4:\\"desc\\";s:32:\\"vidlister.properties.youtubeuser\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"active\\";a:7:{s:4:\\"name\\";s:6:\\"active\\";s:4:\\"desc\\";s:27:\\"vidlister.properties.active\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"if($modx->event->name == \'OnVidListerImport\')\\r\\n{\\r\\n    $user = $modx->getOption(\'user\', $scriptProperties, \'\'); \\/\\/get user name(s)\\r\\n    $active = $modx->getOption(\'active\', $scriptProperties, false); \\/\\/make imported videos inactive by default\\r\\n\\r\\n    if(!empty($user))\\r\\n    {\\r\\n        $modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n        $modx->lexicon->load(\'vidlister:default\');\\r\\n\\r\\n        if (empty($modx->rest))\\r\\n        {\\r\\n            $modx->getService(\'rest\',\'rest.modRestClient\');\\r\\n            $loaded = $modx->rest->getConnection();\\r\\n            if (!$loaded) return $modx->lexicon(\'vidlister.import.err.client\');\\r\\n        }\\r\\n\\r\\n        $users = explode(\',\', $user); \\/\\/user names are comma separated\\r\\n\\r\\n        foreach($users as $user)\\r\\n        {\\r\\n            $modx->log(MODx::LOG_LEVEL_WARN, $modx->lexicon(\'vidlister.import.started\', array(\'source\' => \'Youtube\', \'user\' => $user)));\\r\\n\\r\\n            @$response = $modx->rest->request(\'http:\\/\\/gdata.youtube.com\',\'\\/feeds\\/api\\/users\\/\'.$user.\'\\/uploads\',\'GET\', array(\'max-results\' => 1), array())->response;\\r\\n            \\/\\/@ to prevent PHP notice about $xml being empty (???)\\r\\n            if(empty($response))\\r\\n            {\\r\\n                $modx->log(MODX_LOG_LEVEL_ERROR,  $modx->lexicon(\'vidlister.import.err\'));\\r\\n                continue; \\/\\/response was empty, so go to next user\\r\\n            }\\r\\n\\r\\n            \\/\\/create SimpleXmlElement\\r\\n            $xmlvideos = simplexml_load_string($response);\\r\\n            $openSearch = $xmlvideos->children(\'http:\\/\\/a9.com\\/-\\/spec\\/opensearchrss\\/1.0\\/\');\\r\\n\\r\\n            \\/\\/calculate total number of \\"pages\\" (each feed only lists 50 videos)\\r\\n            $totalVids = $openSearch->totalResults;\\r\\n            $pages = ceil($totalVids\\/50);\\r\\n\\r\\n            \\/\\/every movie not in this array will be deleted after import (no longer on Youtube)\\r\\n            $ids = array();\\r\\n\\r\\n            \\/\\/new\\/total counter for current user\\r\\n            $newVids = 0;\\r\\n\\r\\n            \\/\\/start at first video\\r\\n            $startIndex = 1;\\r\\n\\r\\n            \\/\\/get videos of each page\\r\\n            for($page=1; $page <= $pages; $page++)\\r\\n            {\\r\\n                @$response = $modx->rest->request(\'http:\\/\\/gdata.youtube.com\',\'\\/feeds\\/api\\/users\\/\'.$user.\'\\/uploads\',\'GET\', array(\'max-results\' => 50,\'start-index\' => $startIndex), array())->response;\\r\\n                $xmlvideos = simplexml_load_string($response);\\r\\n\\r\\n                \\/\\/loop through video entries\\r\\n                foreach($xmlvideos->entry as $xmlvideo)\\r\\n                {\\r\\n                    \\/\\/next 2 lines allow to get namespace data in media: and yt: namespace\\r\\n                    $media = $xmlvideo->children(\'http:\\/\\/search.yahoo.com\\/mrss\\/\');\\r\\n                    $yt = $media->children(\'http:\\/\\/gdata.youtube.com\\/schemas\\/2007\');\\r\\n\\r\\n                    \\/\\/get existing video\\r\\n                    $video = $modx->getObject(\'vlVideo\', array(\'source\' => \'youtube\', \'videoId\' => str_replace(\'http:\\/\\/gdata.youtube.com\\/feeds\\/api\\/videos\\/\', \'\', $xmlvideo->id)));\\r\\n                    if(!is_object($video))\\r\\n                    {\\r\\n                        \\/\\/not found, so create new video and set all fields\\r\\n                        $video = $modx->newObject(\'vlVideo\');\\r\\n                        $video->fromArray(array(\\r\\n                            \'active\' => (int)$active,\\r\\n                            \'created\' => strtotime($xmlvideo->published),\\r\\n                            \'updated\' => strtotime($xmlvideo->updated),\\r\\n                            \'source\' => \'youtube\',\\r\\n                            \'videoId\' =>  str_replace(\'http:\\/\\/gdata.youtube.com\\/feeds\\/api\\/videos\\/\', \'\', $xmlvideo->id),\\r\\n                            \'name\' => $xmlvideo->title,\\r\\n                            \'description\' => $xmlvideo->content,\\r\\n                            \'author\' => $xmlvideo->author->name,\\r\\n                            \'keywords\' => $media->group->keywords,\\r\\n                            \'duration\' => $yt->duration->attributes()->seconds,\\r\\n                            \'jsondata\' => array(\\r\\n                                \'flashUrl\' => (string)$media->group->content[0]->attributes()->url,\\r\\n                                \'3gppUrl\' => (string)$media->group->content[1]->attributes()->url\\r\\n                            )\\r\\n                        ));\\r\\n                        $newVids++;\\r\\n                    }\\r\\n                    else\\r\\n                    {\\r\\n                        \\/\\/existing video, so don\'t overwrite name\\/description\\/keywords\\r\\n                        $video->fromArray(array(\\r\\n                            \'updated\' => strtotime($xmlvideo->updated),\\r\\n                            \'author\' => $xmlvideo->author->name,\\r\\n                            \'duration\' => $yt->duration->attributes()->seconds,\\r\\n                            \'jsondata\' => array_merge(\\r\\n                                $video->get(\'jsondata\'),\\r\\n                                array(\\r\\n                                    \'flashUrl\' => (string)$media->group->content[0]->attributes()->url,\\r\\n                                    \'3gppUrl\' => (string)$media->group->content[1]->attributes()->url\\r\\n                                )\\r\\n                            )\\r\\n                        ));\\r\\n                    }\\r\\n                    $video->save();\\r\\n\\r\\n                    \\/\\/get image\\r\\n                    file_put_contents(\\r\\n                        $modx->getOption(\'assets_path\').\'components\\/vidlister\\/images\\/\'.$video->get(\'id\').\'.jpg\',\\r\\n                        file_get_contents($media->group->thumbnail[0]->attributes()->url)\\r\\n                    );\\r\\n\\r\\n                    $ids[] = $video->get(\'id\'); \\/\\/add to found\\/created ID\'s array\\r\\n                    $startIndex++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            $modx->log(modx::LOG_LEVEL_INFO, $modx->lexicon(\'vidlister.import.complete\', array(\'user\' => $user, \'source\' => \'Youtube\', \'total\' => $totalVids, \'new\' => $newVids)));\\r\\n\\r\\n            \\/\\/remove all videos not found in XML\\r\\n            $delVideos = $modx->getCollection(\'vlVideo\', array(\'source\' => \'youtube\', \'author\' => $user, \'id NOT IN(\'.implode(\',\', $ids).\')\'));\\r\\n            foreach($delVideos as $delVideo)\\r\\n            {\\r\\n                $delVideo->remove();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}"}',
        'guid' => 'a77c360b21bc87feada89910a0e9331f',
        'native_key' => 0,
        'signature' => '99aa61d9bbc1e1f54f5014eaf36649cc',
      ),
      '2dacfa9eb0fefdfdfd15cc845d91c93a' => 
      array (
        'preserve_keys' => true,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":0,"source":0,"property_preprocess":0,"name":"vlVimeo","description":"Imports Vimeo videos for VidLister","editor_type":0,"category":0,"cache_type":0,"plugincode":"if($modx->event->name == \'OnVidListerImport\')\\r\\n{\\r\\n    $consumer_key = $modx->getOption(\'consumer_key\', $scriptProperties, \'\');\\r\\n    $consumer_secret = $modx->getOption(\'consumer_secret\', $scriptProperties, \'\');\\r\\n    $user = $modx->getOption(\'user\', $scriptProperties, \'\'); \\/\\/get user name(s)\\r\\n    $active = $modx->getOption(\'active\', $scriptProperties, false); \\/\\/make imported videos inactive by default\\r\\n    $source = \'vimeo\';\\r\\n\\r\\n    if(!empty($consumer_key) && !empty($consumer_secret) && !empty($user))\\r\\n    {\\r\\n        $modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n        $modx->lexicon->load(\'vidlister:default\');\\r\\n        $users = explode(\',\', $user); \\/\\/user names are comma separated\\r\\n\\r\\n        require_once($modx->getOption(\'core_path\').\'components\\/vidlister\\/model\\/vimeo\\/vimeo.class.php\');\\r\\n        $vimeo = new phpVimeo($consumer_key,$consumer_secret);\\r\\n\\r\\n        foreach($users as $user)\\r\\n        {\\r\\n            $modx->log(modx::LOG_LEVEL_WARN, $modx->lexicon(\'vidlister.import.started\', array(\'source\' => $source, \'user\' => $user)));\\r\\n\\r\\n            $videos = $vimeo->call(\'vimeo.videos.getUploaded\', array(\'user_id\' => $user));\\r\\n            $pages = ceil( (int)$videos->videos->total \\/ (int)$videos->videos->perpage);\\r\\n\\r\\n            \\/\\/new\\/total counter for current user\\r\\n            $newVids = 0;\\r\\n            $totalVids = 0;\\r\\n\\r\\n            for($i = 1; $i <= $pages; $i++)\\r\\n            {\\r\\n                $videos = $vimeo->call(\'vimeo.videos.getUploaded\', array(\'user_id\' => $user, \'page\' => $i, \'full_response\' => true));\\r\\n                foreach($videos->videos->video as $video)\\r\\n                {\\r\\n                    $vid = $modx->getObject(\'vlVideo\', array(\'source\' => $source, \'videoId\' => $video->id));\\r\\n                    if(!is_object($vid))\\r\\n                    {\\r\\n                        \\/\\/not found, so create new video and set all fields\\r\\n                        $vid = $modx->newObject(\'vlVideo\');\\r\\n\\r\\n                        $tags = array();\\r\\n                        if(isset($video->tags)) {\\r\\n                            foreach($video->tags->tag as $tag) {\\r\\n                                $tags[] = $tag->_content;\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        $vid->fromArray(array(\\r\\n                            \'active\' => (int)$active,\\r\\n                            \'created\' => strtotime($video->upload_date),\\r\\n                            \'updated\' => strtotime($video->modified_date),\\r\\n                            \'source\' => $source,\\r\\n                            \'videoId\' =>  $video->id,\\r\\n                            \'name\' => $video->title,\\r\\n                            \'description\' => $video->description,\\r\\n                            \'author\' => $user,\\r\\n                            \'keywords\' => implode(\',\', $tags),\\r\\n                            \'duration\' => $video->duration,\\r\\n                            \'jsondata\' => array()\\r\\n                        ));\\r\\n                        $newVids++;\\r\\n                    }\\r\\n                    else\\r\\n                    {\\r\\n                        \\/\\/existing video, so don\'t overwrite name\\/description\\/keywords\\r\\n                        $vid->fromArray(array(\\r\\n                            \'updated\' => strtotime($video->modified_date),\\r\\n                            \'author\' => $user,\\r\\n                            \'duration\' => $video->duration,\\r\\n                            \'jsondata\' => array_merge(\\r\\n                                $vid->get(\'jsondata\'),\\r\\n                                array()\\r\\n                            )\\r\\n                        ));\\r\\n                    }\\r\\n                    $vid->save();\\r\\n\\r\\n                    \\/\\/get image\\r\\n                    file_put_contents(\\r\\n                        $modx->getOption(\'assets_path\').\'components\\/vidlister\\/images\\/\'.$vid->get(\'id\').\'.jpg\',\\r\\n                        file_get_contents(end($video->thumbnails->thumbnail)->_content)\\r\\n                    );\\r\\n\\r\\n                    $ids[] = $vid->get(\'id\'); \\/\\/add to found\\/created ID\'s array\\r\\n                    $totalVids++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            $modx->log(modx::LOG_LEVEL_INFO, $modx->lexicon(\'vidlister.import.complete\', array(\'user\' => $user, \'source\' => $source, \'total\' => $totalVids, \'new\' => $newVids)));\\r\\n\\r\\n            \\/\\/remove all videos not found in XML\\r\\n            $delVideos = $modx->getCollection(\'vlVideo\', array(\'source\' => $source, \'author\' => $user, \'id NOT IN(\'.implode(\',\', $ids).\')\'));\\r\\n            foreach($delVideos as $delVideo) {\\r\\n                $delVideo->remove();\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n}","locked":0,"properties":"a:4:{s:4:\\"user\\";a:7:{s:4:\\"name\\";s:4:\\"user\\";s:4:\\"desc\\";s:30:\\"vidlister.properties.vimeouser\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"consumer_key\\";a:7:{s:4:\\"name\\";s:12:\\"consumer_key\\";s:4:\\"desc\\";s:29:\\"vidlister.properties.vimeokey\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"consumer_secret\\";a:7:{s:4:\\"name\\";s:15:\\"consumer_secret\\";s:4:\\"desc\\";s:32:\\"vidlister.properties.vimeosecret\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"active\\";a:7:{s:4:\\"name\\";s:6:\\"active\\";s:4:\\"desc\\";s:27:\\"vidlister.properties.active\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:17:\\"vidlister:default\\";s:4:\\"area\\";s:0:\\"\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"if($modx->event->name == \'OnVidListerImport\')\\r\\n{\\r\\n    $consumer_key = $modx->getOption(\'consumer_key\', $scriptProperties, \'\');\\r\\n    $consumer_secret = $modx->getOption(\'consumer_secret\', $scriptProperties, \'\');\\r\\n    $user = $modx->getOption(\'user\', $scriptProperties, \'\'); \\/\\/get user name(s)\\r\\n    $active = $modx->getOption(\'active\', $scriptProperties, false); \\/\\/make imported videos inactive by default\\r\\n    $source = \'vimeo\';\\r\\n\\r\\n    if(!empty($consumer_key) && !empty($consumer_secret) && !empty($user))\\r\\n    {\\r\\n        $modx->getService(\'vidlister\',\'VidLister\',$modx->getOption(\'vidlister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/vidlister\\/\').\'model\\/vidlister\\/\',$scriptProperties);\\r\\n        $modx->lexicon->load(\'vidlister:default\');\\r\\n        $users = explode(\',\', $user); \\/\\/user names are comma separated\\r\\n\\r\\n        require_once($modx->getOption(\'core_path\').\'components\\/vidlister\\/model\\/vimeo\\/vimeo.class.php\');\\r\\n        $vimeo = new phpVimeo($consumer_key,$consumer_secret);\\r\\n\\r\\n        foreach($users as $user)\\r\\n        {\\r\\n            $modx->log(modx::LOG_LEVEL_WARN, $modx->lexicon(\'vidlister.import.started\', array(\'source\' => $source, \'user\' => $user)));\\r\\n\\r\\n            $videos = $vimeo->call(\'vimeo.videos.getUploaded\', array(\'user_id\' => $user));\\r\\n            $pages = ceil( (int)$videos->videos->total \\/ (int)$videos->videos->perpage);\\r\\n\\r\\n            \\/\\/new\\/total counter for current user\\r\\n            $newVids = 0;\\r\\n            $totalVids = 0;\\r\\n\\r\\n            for($i = 1; $i <= $pages; $i++)\\r\\n            {\\r\\n                $videos = $vimeo->call(\'vimeo.videos.getUploaded\', array(\'user_id\' => $user, \'page\' => $i, \'full_response\' => true));\\r\\n                foreach($videos->videos->video as $video)\\r\\n                {\\r\\n                    $vid = $modx->getObject(\'vlVideo\', array(\'source\' => $source, \'videoId\' => $video->id));\\r\\n                    if(!is_object($vid))\\r\\n                    {\\r\\n                        \\/\\/not found, so create new video and set all fields\\r\\n                        $vid = $modx->newObject(\'vlVideo\');\\r\\n\\r\\n                        $tags = array();\\r\\n                        if(isset($video->tags)) {\\r\\n                            foreach($video->tags->tag as $tag) {\\r\\n                                $tags[] = $tag->_content;\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        $vid->fromArray(array(\\r\\n                            \'active\' => (int)$active,\\r\\n                            \'created\' => strtotime($video->upload_date),\\r\\n                            \'updated\' => strtotime($video->modified_date),\\r\\n                            \'source\' => $source,\\r\\n                            \'videoId\' =>  $video->id,\\r\\n                            \'name\' => $video->title,\\r\\n                            \'description\' => $video->description,\\r\\n                            \'author\' => $user,\\r\\n                            \'keywords\' => implode(\',\', $tags),\\r\\n                            \'duration\' => $video->duration,\\r\\n                            \'jsondata\' => array()\\r\\n                        ));\\r\\n                        $newVids++;\\r\\n                    }\\r\\n                    else\\r\\n                    {\\r\\n                        \\/\\/existing video, so don\'t overwrite name\\/description\\/keywords\\r\\n                        $vid->fromArray(array(\\r\\n                            \'updated\' => strtotime($video->modified_date),\\r\\n                            \'author\' => $user,\\r\\n                            \'duration\' => $video->duration,\\r\\n                            \'jsondata\' => array_merge(\\r\\n                                $vid->get(\'jsondata\'),\\r\\n                                array()\\r\\n                            )\\r\\n                        ));\\r\\n                    }\\r\\n                    $vid->save();\\r\\n\\r\\n                    \\/\\/get image\\r\\n                    file_put_contents(\\r\\n                        $modx->getOption(\'assets_path\').\'components\\/vidlister\\/images\\/\'.$vid->get(\'id\').\'.jpg\',\\r\\n                        file_get_contents(end($video->thumbnails->thumbnail)->_content)\\r\\n                    );\\r\\n\\r\\n                    $ids[] = $vid->get(\'id\'); \\/\\/add to found\\/created ID\'s array\\r\\n                    $totalVids++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            $modx->log(modx::LOG_LEVEL_INFO, $modx->lexicon(\'vidlister.import.complete\', array(\'user\' => $user, \'source\' => $source, \'total\' => $totalVids, \'new\' => $newVids)));\\r\\n\\r\\n            \\/\\/remove all videos not found in XML\\r\\n            $delVideos = $modx->getCollection(\'vlVideo\', array(\'source\' => $source, \'author\' => $user, \'id NOT IN(\'.implode(\',\', $ids).\')\'));\\r\\n            foreach($delVideos as $delVideo) {\\r\\n                $delVideo->remove();\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n}"}',
        'guid' => 'bcfbdca25b04a472ce52b0c6cc0dd4d6',
        'native_key' => 0,
        'signature' => 'e5de67f31153a7db0d37b90b16f84a88',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => false,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => true,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'vidlister',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"vidlister-1.0.0-alpha6\\/modCategory\\/1b1612a062607a32d18db73cd84470e9\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"vidlister"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"vidlister-1.0.0-alpha6\\/modCategory\\/1b1612a062607a32d18db73cd84470e9\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"vidlister"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"vidlister-1.0.0-alpha6\\/modCategory\\/1b1612a062607a32d18db73cd84470e9.postactions.resolver.resolver","type":"php","name":"postactions.resolver"}',
    ),
    3 => 
    array (
      'type' => 'php',
      'body' => '{"source":"vidlister-1.0.0-alpha6\\/modCategory\\/1b1612a062607a32d18db73cd84470e9.plugins.resolver.resolver","type":"php","name":"plugins.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'aecb479de7be9bf6a10555ce81db0447',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '1b1612a062607a32d18db73cd84470e9',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"VidLister"}',
);